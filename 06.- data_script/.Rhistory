sep = ";",
as.is = TRUE,
check.names = FALSE)
View(df_train_original)
class{df_train_original}
class(df_train_original)
apply(df_train_original)
apply(df_train_original, class)
lapply(df_train_original, class)
# Borramos todos los objetos.
rm(list=ls())
options(warn=-1)  #Suprimimos los Warnings
a_train_original_data <- "train_original.csv"
a_train_original_weka <- "train_original.arff"
df_train_original <- read.csv(a_train_original,
header = TRUE,
sep = ";",
as.is = TRUE,
check.names = FALSE)
# Borramos todos los objetos.
rm(list=ls())
options(warn=-1)  #Suprimimos los Warnings
a_train_original_data <- "train_original.csv"
a_train_original_weka <- "train_original.arff"
df_train_original <- read.csv(a_train_original_data,
header = TRUE,
sep = ";",
as.is = TRUE,
check.names = FALSE)
# Borramos todos los objetos.
rm(list=ls())
options(warn=-1)  #Suprimimos los Warnings
a_train_original_data <- "train_original.csv"
df_train_original <- read.csv(a_train_original_data,
header = TRUE,
sep = ";",
as.is = TRUE,
check.names = FALSE)
a_train_original_data <- "train_original.csv"
df_train_original <- read.csv(a_train_original_data,
header = TRUE,
sep = ",",
as.is = TRUE,
check.names = FALSE)
View(df_train_original)
# Borramos todos los objetos.
rm(list=ls())
options(warn=-1)  #Suprimimos los Warnings
a_train_original_data <- "train_original.csv"
df_train_original <- read.csv(a_train_original_data,
header = TRUE,
sep = ",",
as.is = TRUE,
check.names = FALSE)
View(df_train_original)
miss_col_name <- "housing"
porc_min_faltantes <- 0
porc_max_faltantes <- 0.75
porc_step_faltantes <- 0.05
df_train_original[,miss_col_name]
sample(1:nrow(df_train_original), 0.7*nrow(df_train_original))
sample(1:nrow(df_train_original), 0.05*nrow(df_train_original))
df_train_aux <- df_train_original
df_train_aux <- df_train_original
df_train_aux_rows <- sample(1:nrow(df_train_aux), 0.05*nrow(df_train_aux))
# Partimos del data set puro.
df_train_aux_moda <- df_train_original
df_train_aux_moda_clase <- df_train_original
# Tomamos el procentaje de filas a nulear al azar.
df_train_aux_rows <- sample(1:nrow(df_train_aux_moda), 0.05*nrow(df_train_aux_moda))
# Nuleamos
df_train_aux_moda[df_train_aux_rows, miss_col_name] <- NA
df_train_aux_moda_clase[df_train_aux_rows, miss_col_name] <- NA
df_train_aux_moda[,miss_col_name]
mode(x = df_train_aux_moda[,miss_col_name])
mode(x = as.vector(df_train_aux_moda[,miss_col_name])
)
mode(x = as.vector(df_train_aux_moda[,miss_col_name])
mode(x = as.vector(df_train_aux_moda[,miss_col_name]))
mode(x = df_train_aux_moda$housing)
library(modeest)
library("library(modeest)")
install.packages("modeest")
library("modeest")
library(modeest)
install.packages("modeest")
library(modeest)
library("modeest")
install.packages("library("modeest")")
install.packages(modeest")
install.packages("modeest")
library("modeest")
install.packages("C:/Users/clupi/AppData/Local/Temp/Rtmp0S19lT/downloaded_packages/modeest_2.1.zip", repos = NULL, type = "win.binary")
install.packages("modeest")
library("modeest")
getMode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
df_train_aux_moda[df_train_aux_rows, miss_col_name]
df_train_aux_moda[-df_train_aux_rows, miss_col_name]
getMode(df_train_aux_moda[-df_train_aux_rows, miss_col_name])
aggregate(df_train_aux_moda[df_train_aux_rows, miss_col_name])
aggregate(df_train_aux_moda[df_train_aux_rows, miss_col_name], FUN=COUNT)
TABLE(df_train_aux_moda[df_train_aux_rows, miss_col_name])
table(df_train_aux_moda[df_train_aux_rows, miss_col_name])
table(df_train_aux_moda[df_train_aux_rows, miss_col_name])
df_train_aux_moda[df_train_aux_rows, miss_col_name]
table(df_train_aux_moda[df_train_aux_rows, miss_col_name])
table(df_train_aux_moda[-df_train_aux_rows, miss_col_name])
TABLE(df_train_aux_moda[df_train_aux_rows, miss_col_name])
df_train_aux_moda[df_train_aux_rows, miss_col_name]
getMode(df_train_aux_moda[-df_train_aux_rows, miss_col_name])
getMode(df_train_aux_moda[(-df_train_aux_rows) &  & df_train_aux_moda_clase$y == "yes", miss_col_name])
getMode(df_train_aux_moda[(-df_train_aux_rows) & df_train_aux_moda_clase$y == "yes", miss_col_name])
getMode(df_train_aux_moda[(-df_train_aux_rows) & df_train_aux_moda_clase$y == 'yes', miss_col_name])
df_train_aux_moda_clase[df_train_aux_rows & df_train_aux_moda_clase$y, miss_col_name]
df_train_aux_moda_clase[df_train_aux_rows & df_train_aux_moda_clase$y == 'yes', miss_col_name]
df_train_aux_moda_clase[df_train_aux_rows,][df_train_aux_moda_clase$y == 'yes', miss_col_name]
df_train_aux_moda[-df_train_aux_rows,][df_train_aux_moda_clase$y == 'yes', miss_col_name]
df_train_aux_moda[-df_train_aux_rows,][df_train_aux_moda_clase$y == 'no', miss_col_name]
getMode(df_train_aux_moda[-df_train_aux_rows,][df_train_aux_moda_clase$y == 'yes', miss_col_name])
getMode(df_train_aux_moda[-df_train_aux_rows,][df_train_aux_moda_clase$y == 'no', miss_col_name])
# Nuleamos
df_train_aux_moda[df_train_aux_rows, miss_col_name] <- NA
df_train_aux_moda_clase[df_train_aux_rows, miss_col_name] <- NA
# Reemplazamos por moda y moda clase
df_train_aux_moda[df_train_aux_rows, miss_col_name] <- getMode(df_train_aux_moda[-df_train_aux_rows, miss_col_name])
df_train_aux_moda_clase[df_train_aux_rows,][df_train_aux_moda_clase$y == 'yes', miss_col_name] <- getMode(df_train_aux_moda[-df_train_aux_rows,][df_train_aux_moda_clase$y == 'yes', miss_col_name])
df_train_aux_moda_clase[df_train_aux_rows,][df_train_aux_moda_clase$y == 'yes', miss_col_name] <- getMode(df_train_aux_moda[-df_train_aux_rows,][df_train_aux_moda_clase$y == 'yes', miss_col_name])
df_train_aux_moda_clase[df_train_aux_rows,][df_train_aux_moda_clase$y == 'no', miss_col_name] <- getMode(df_train_aux_moda[-df_train_aux_rows,][df_train_aux_moda_clase$y == 'no', miss_col_name])
miss_col_name <- "housing"
porc_min_faltantes <- 0
porc_max_faltantes <- 0.75
porc_step_faltantes <- 0.05
# Partimos del data set puro.
df_train_aux_moda <- df_train_original
df_train_aux_moda_clase <- df_train_original
# Tomamos el procentaje de filas a nulear al azar.
df_train_aux_rows <- sample(1:nrow(df_train_aux_moda), 0.05*nrow(df_train_aux_moda))
# Nuleamos
df_train_aux_moda[df_train_aux_rows, miss_col_name] <- NA
df_train_aux_moda_clase[df_train_aux_rows, miss_col_name] <- NA
# Reemplazamos por moda y moda clase
df_train_aux_moda[df_train_aux_rows, miss_col_name] <- getMode(df_train_aux_moda[-df_train_aux_rows, miss_col_name])
df_train_aux_moda_clase[df_train_aux_rows,][df_train_aux_moda_clase$y == 'yes', miss_col_name] <- getMode(df_train_aux_moda[-df_train_aux_rows,][df_train_aux_moda_clase$y == 'yes', miss_col_name])
df_train_aux_moda[-df_train_aux_rows,][df_train_aux_moda_clase$y == 'yes', miss_col_name]
getMode(df_train_aux_moda[-df_train_aux_rows,][df_train_aux_moda_clase$y == 'yes', miss_col_name])
df_train_aux_moda_clase[df_train_aux_rows,][df_train_aux_moda_clase$y == 'yes', miss_col_name] <- getMode(df_train_aux_moda[-df_train_aux_rows,][df_train_aux_moda_clase$y == 'yes', miss_col_name])
df_train_aux_moda_clase[df_train_aux_rows,][df_train_aux_moda_clase$y == 'yes', miss_col_name]
df_train_aux_moda_clase[df_train_aux_rows,][df_train_aux_moda_clase$y == 'yes', miss_col_name] <- getMode(df_train_aux_moda[-df_train_aux_rows,][df_train_aux_moda_clase$y == 'yes', miss_col_name])
df_train_aux_moda_clase[df_train_aux_rows,][df_train_aux_moda_clase$y == 'yes', miss_col_name]
df_train_aux_moda_clase[df_train_aux_rows,][df_train_aux_moda_clase$y == 'yes', miss_col_name] <- "yes"
df_train_aux_moda_clase[df_train_aux_rows,][df_train_aux_moda_clase$y == 'yes', miss_col_name] <- 5
View(df_train_aux_moda)
View(df_train_aux_moda_clase)
rm(list=ls())
options(warn=-1)  #Suprimimos los Warnings
#Función de moda
getMode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
a_train_original_data <- "train_original.csv"
df_train_original <- read.csv(a_train_original_data,
header = TRUE,
sep = ",",
as.is = TRUE,
check.names = FALSE)
miss_col_name <- "housing"
porc_min_faltantes <- 0
porc_max_faltantes <- 0.75
porc_step_faltantes <- 0.05
# Partimos del data set puro.
df_train_aux_moda <- df_train_original
df_train_aux_moda_clase <- df_train_original
# Tomamos el procentaje de filas a nulear al azar.
df_train_aux_rows <- sample(1:nrow(df_train_aux_moda), 0.05*nrow(df_train_aux_moda))
# Nuleamos
df_train_aux_moda[df_train_aux_rows, miss_col_name] <- NA
df_train_aux_moda_clase[df_train_aux_rows, miss_col_name] <- NA
df_train_aux_moda[df_train_aux_rows, miss_col_name]
df_train_aux_moda_clase[df_train_aux_rows,][df_train_aux_moda_clase$y == 'yes', miss_col_name]
df_train_aux_moda_clase$y
df_train_aux_moda_clase[df_train_aux_rows,][df_train_aux_moda_clase$y == "yes", miss_col_name]
df_train_aux_moda_clase
table(df_train_aux_moda_clase$housing)
df_train_aux_moda_clase[df_train_aux_rows, miss_col_name]
df_train_aux_moda_clase[df_train_aux_rows,]
df_train_aux_moda_clase[df_train_aux_rows,][df_train_aux_moda_clase[df_train_aux_rows,]$y == "yes", miss_col_name]
getMode(df_train_aux_moda[-df_train_aux_rows,][df_train_aux_moda[-df_train_aux_rows,]$y == 'yes', miss_col_name])
getMode(df_train_aux_moda[-df_train_aux_rows,][df_train_aux_moda[-df_train_aux_rows,]$y == 'no', miss_col_name])
df_train_aux_moda_clase[df_train_aux_rows,][df_train_aux_moda_clase[df_train_aux_rows,]$y == "yes", miss_col_name] <- getMode(df_train_aux_moda[-df_train_aux_rows,][df_train_aux_moda[-df_train_aux_rows,]$y == 'yes', miss_col_name])
df_train_aux_moda_clase[df_train_aux_rows,][df_train_aux_moda_clase[df_train_aux_rows,]$y == 'no', miss_col_name] <- getMode(df_train_aux_moda[-df_train_aux_rows,][df_train_aux_moda[-df_train_aux_rows,]$y == 'no', miss_col_name])
# Borramos todos los objetos.
rm(list=ls())
options(warn=-1)  #Suprimimos los Warnings
#Función de moda
getMode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
a_train_original_data <- "train_original.csv"
df_train_original <- read.csv(a_train_original_data,
header = TRUE,
sep = ",",
as.is = TRUE,
check.names = FALSE)
miss_col_name <- "housing"
porc_min_faltantes <- 0
porc_max_faltantes <- 0.75
porc_step_faltantes <- 0.05
# Partimos del data set puro.
df_train_aux_moda <- df_train_original
df_train_aux_moda_clase <- df_train_original
# Tomamos el procentaje de filas a nulear al azar.
df_train_aux_rows <- sample(1:nrow(df_train_aux_moda), 0.05*nrow(df_train_aux_moda))
# Nuleamos
df_train_aux_moda[df_train_aux_rows, miss_col_name] <- NA
df_train_aux_moda_clase[df_train_aux_rows, miss_col_name] <- NA
# Reemplazamos por moda y moda clase
df_train_aux_moda[df_train_aux_rows, miss_col_name] <- getMode(df_train_aux_moda[-df_train_aux_rows, miss_col_name])
df_train_aux_moda_clase[df_train_aux_rows,][df_train_aux_moda_clase[df_train_aux_rows,]$y == "yes", miss_col_name] <- getMode(df_train_aux_moda[-df_train_aux_rows,][df_train_aux_moda[-df_train_aux_rows,]$y == 'yes', miss_col_name])
df_train_aux_moda_clase[df_train_aux_rows,][df_train_aux_moda_clase[df_train_aux_rows,]$y == 'no', miss_col_name] <- getMode(df_train_aux_moda[-df_train_aux_rows,][df_train_aux_moda[-df_train_aux_rows,]$y == 'no', miss_col_name])
table(df_train_aux_moda$housing)
# Partimos del data set puro.
df_train_aux_moda <- df_train_original
table(df_train_aux_moda$housing)
s_dataset_faltantes <- "dataset_faltantes_"
s_moda <- "_moda.csv"
s_moda_clase <- "_moda_clase.csv"
paste(s_dataset_faltantes, as.character(porc_step_faltantes), s_moda)
paste(s_dataset_faltantes, as.character(porc_step_faltantes), s_moda, sep = '')
paste(s_dataset_faltantes, as.character(porc_step_faltantes*100), s_moda, sep = '')
write.csv(paste(s_dataset_faltantes, as.character(porc_step_faltantes*100), s_moda, sep = ''),
header = TRUE,
sep = ",",
as.is = TRUE,
check.names = FALSE)
write.csv(x = df_train_aux_moda,
file = paste(s_dataset_faltantes, as.character(porc_step_faltantes*100), s_moda, sep = ''),
sep = ",")
write.table(x = df_train_aux_moda,
file = paste(s_dataset_faltantes, as.character(porc_step_faltantes*100), s_moda, sep = ''),
sep = ",")
write.table(x = df_train_aux_moda,
file = paste(s_dataset_faltantes, as.character(porc_step_faltantes*100), s_moda, sep = ''),
sep = ",",
quote = FALSE)
head(df_train_aux_moda)
write.table(x = df_train_aux_moda,
file = paste(s_dataset_faltantes, as.character(porc_step_faltantes*100), s_moda, sep = ''),
sep = ",",
quote = FALSE,
row.names = FALSE)
write.table(x = df_train_aux_moda_clase,
file = paste(s_dataset_faltantes, as.character(porc_step_faltantes*100), s_moda_clase, sep = ''),
sep = ",",
quote = FALSE,
row.names = FALSE)
N <- round((porc_max_faltantes - porc_min_faltantes) /  porc_step_faltantes, 0)
# Borramos todos los objetos.
rm(list=ls())
options(warn=-1)  #Suprimimos los Warnings
#Función de moda
getMode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
a_train_original_data <- "train_original.csv"
s_dataset_faltantes <- "dataset_faltantes_"
s_moda <- "_moda.csv"
s_moda_clase <- "_moda_clase.csv"
df_train_original <- read.csv(a_train_original_data,
header = TRUE,
sep = ",",
as.is = TRUE,
check.names = FALSE)
miss_col_name <- "housing"
porc_min_faltantes <- 0
porc_max_faltantes <- 0.75
porc_step_faltantes <- 0.05
# Cantidad de archivos a generar por tipo de imputación.
N <- round((porc_max_faltantes - porc_min_faltantes) /  porc_step_faltantes, 0)
for (i in 0:N){
porc_faltantes <- porc_min_faltantes + i*porc_step_faltantes
# Partimos del data set puro.
df_train_aux_moda <- df_train_original
df_train_aux_moda_clase <- df_train_original
# Tomamos el procentaje de filas a nulear al azar.
df_train_aux_rows <- sample(1:nrow(df_train_aux_moda), porc_faltantes*nrow(df_train_aux_moda))
# Nuleamos
df_train_aux_moda[df_train_aux_rows, miss_col_name] <- NA
df_train_aux_moda_clase[df_train_aux_rows, miss_col_name] <- NA
# Reemplazamos por moda y moda clase
df_train_aux_moda[df_train_aux_rows, miss_col_name] <- getMode(df_train_aux_moda[-df_train_aux_rows, miss_col_name])
df_train_aux_moda_clase[df_train_aux_rows,][df_train_aux_moda_clase[df_train_aux_rows,]$y == "yes", miss_col_name] <- getMode(df_train_aux_moda[-df_train_aux_rows,][df_train_aux_moda[-df_train_aux_rows,]$y == 'yes', miss_col_name])
df_train_aux_moda_clase[df_train_aux_rows,][df_train_aux_moda_clase[df_train_aux_rows,]$y == 'no', miss_col_name] <- getMode(df_train_aux_moda[-df_train_aux_rows,][df_train_aux_moda[-df_train_aux_rows,]$y == 'no', miss_col_name])
write.table(x = df_train_aux_moda,
file = paste(s_dataset_faltantes, as.character(porc_faltantes*100), s_moda, sep = ''),
sep = ",",
quote = FALSE,
row.names = FALSE)
write.table(x = df_train_aux_moda_clase,
file = paste(s_dataset_faltantes, as.character(porc_faltantes*100), s_moda_clase, sep = ''),
sep = ",",
quote = FALSE,
row.names = FALSE)
}
porc_faltantes <- porc_min_faltantes + i*porc_step_faltantes
# Partimos del data set puro.
df_train_aux_moda <- df_train_original
df_train_aux_moda_clase <- df_train_original
# Tomamos el procentaje de filas a nulear al azar.
df_train_aux_rows <- sample(1:nrow(df_train_aux_moda), porc_faltantes*nrow(df_train_aux_moda))
# Nuleamos
df_train_aux_moda[df_train_aux_rows, miss_col_name] <- NA
df_train_aux_moda_clase[df_train_aux_rows, miss_col_name] <- NA
# Reemplazamos por moda y moda clase
df_train_aux_moda[df_train_aux_rows, miss_col_name] <- getMode(df_train_aux_moda[-df_train_aux_rows, miss_col_name])
df_train_aux_moda_clase[df_train_aux_rows,][df_train_aux_moda_clase[df_train_aux_rows,]$y == "yes", miss_col_name] <- getMode(df_train_aux_moda[-df_train_aux_rows,][df_train_aux_moda[-df_train_aux_rows,]$y == 'yes', miss_col_name])
df_train_aux_moda[-df_train_aux_rows,][df_train_aux_moda[-df_train_aux_rows,]$y == 'yes', miss_col_name]
rm(list=ls())
options(warn=-1)  #Suprimimos los Warnings
#Función de moda
getMode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
a_train_original_data <- "train_original.csv"
s_dataset_faltantes <- "dataset_faltantes_"
s_moda <- "_moda.csv"
s_moda_clase <- "_moda_clase.csv"
df_train_original <- read.csv(a_train_original_data,
header = TRUE,
sep = ",",
as.is = TRUE,
check.names = FALSE)
miss_col_name <- "housing"
porc_min_faltantes <- 0
porc_max_faltantes <- 0.75
porc_step_faltantes <- 0.05
# Cantidad de archivos a generar por tipo de imputación.
N <- round((porc_max_faltantes - porc_min_faltantes) /  porc_step_faltantes, 0)
for (i in 1:N){
porc_faltantes <- porc_min_faltantes + i*porc_step_faltantes
# Partimos del data set puro.
df_train_aux_moda <- df_train_original
df_train_aux_moda_clase <- df_train_original
# Tomamos el procentaje de filas a nulear al azar.
df_train_aux_rows <- sample(1:nrow(df_train_aux_moda), porc_faltantes*nrow(df_train_aux_moda))
# Nuleamos
df_train_aux_moda[df_train_aux_rows, miss_col_name] <- NA
df_train_aux_moda_clase[df_train_aux_rows, miss_col_name] <- NA
# Reemplazamos por moda y moda clase
df_train_aux_moda[df_train_aux_rows, miss_col_name] <- getMode(df_train_aux_moda[-df_train_aux_rows, miss_col_name])
df_train_aux_moda_clase[df_train_aux_rows,][df_train_aux_moda_clase[df_train_aux_rows,]$y == "yes", miss_col_name] <- getMode(df_train_aux_moda[-df_train_aux_rows,][df_train_aux_moda[-df_train_aux_rows,]$y == 'yes', miss_col_name])
df_train_aux_moda_clase[df_train_aux_rows,][df_train_aux_moda_clase[df_train_aux_rows,]$y == 'no', miss_col_name] <- getMode(df_train_aux_moda[-df_train_aux_rows,][df_train_aux_moda[-df_train_aux_rows,]$y == 'no', miss_col_name])
write.table(x = df_train_aux_moda,
file = paste(s_dataset_faltantes, as.character(porc_faltantes*100), s_moda, sep = ''),
sep = ",",
quote = FALSE,
row.names = FALSE)
write.table(x = df_train_aux_moda_clase,
file = paste(s_dataset_faltantes, as.character(porc_faltantes*100), s_moda_clase, sep = ''),
sep = ",",
quote = FALSE,
row.names = FALSE)
}
rm(list=ls())
options(warn=-1)  #Suprimimos los Warnings
a_train_original_data <- "train_original.csv"
s_dataset_faltantes <- "dataset_ruido_"
s_csv <- "_.csv"
df_train_original <- read.csv(a_train_original_data,
header = TRUE,
sep = ",",
as.is = TRUE,
check.names = FALSE)
View(df_train_original)
porc_min_ruido <- 0
porc_max_ruido <- 0.35
porc_step_ruido <- 0.01
# Cantidad de archivos a generar por tipo de ruido.
N <- round((porc_max_ruido - porc_min_ruido) /  porc_step_ruido, 0)
ruido <- porc_min_ruido + i*porc_step_ruido
i <. 1
i <- 1
ruido <- porc_min_ruido + i*porc_step_ruido
# Partimos del data set puro.
df_train_aux <- df_train_original
porc_ruido <- porc_min_ruido + i*porc_step_ruido
# Tomamos el procentaje de filas a nulear al azar.
df_train_aux_rows <- sample(1:nrow(df_train_aux), porc_ruido*nrow(df_train_aux))
df_train_aux_rows
df_train_aux[df_train_aux_rows, "y"]
df_train_aux[df_train_aux_rows & df_train_aux[df_train_aux_rows,]$y == "yes", "y"]
df_train_aux[df_train_aux_rows,]$y == "yes"
df_train_aux[df_train_aux_rows, "y"][df_train_aux[df_train_aux_rows,]$y == "yes", "y"]
df_train_aux[df_train_aux_rows, "y"]
class(df_train_aux[df_train_aux_rows, "y"])
df_train_aux[df_train_aux_rows, ][df_train_aux[df_train_aux_rows,]$y == "yes", "y"]
df_train_aux[df_train_aux_rows, ][df_train_aux[df_train_aux_rows,]$y == "no", "y"] <- "yes"
df_train_aux[df_train_aux_rows, "y"]
# Partimos del data set puro.
df_train_aux <- df_train_original
df_train_aux[df_train_aux_rows, y]
df_train_aux[df_train_aux_rows, "y"]
# Agregamos el ruido
df_train_aux[df_train_aux_rows, ][df_train_aux[df_train_aux_rows,]$y == "yes", "y"] <- "n"
df_train_aux[df_train_aux_rows, ][df_train_aux[df_train_aux_rows,]$y == "no", "y"] <- "y"
df_train_aux[df_train_aux$y == "n", "y"] <- "no"
df_train_aux[df_train_aux$y == "y", "y"] <- "yes"
df_train_aux[df_train_aux_rows, y]
df_train_aux[df_train_aux_rows, "y"]
df_train_aux[, "y"]
rm(list=ls())
options(warn=-1)  #Suprimimos los Warnings
a_train_original_data <- "train_original.csv"
s_dataset_faltantes <- "dataset_ruido_"
s_csv <- "_.csv"
df_train_original <- read.csv(a_train_original_data,
header = TRUE,
sep = ",",
as.is = TRUE,
check.names = FALSE)
porc_min_ruido <- 0
porc_max_ruido <- 0.35
porc_step_ruido <- 0.01
# Cantidad de archivos a generar por tipo de ruido.
N <- round((porc_max_ruido - porc_min_ruido) /  porc_step_ruido, 0)
for (i in 1:N){
porc_ruido <- porc_min_ruido + i*porc_step_ruido
# Partimos del data set puro.
df_train_aux <- df_train_original
# Tomamos el procentaje de filas a nulear al azar.
df_train_aux_rows <- sample(1:nrow(df_train_aux), porc_ruido*nrow(df_train_aux))
# Agregamos el ruido
df_train_aux[df_train_aux_rows, ][df_train_aux[df_train_aux_rows,]$y == "yes", "y"] <- "n"
df_train_aux[df_train_aux_rows, ][df_train_aux[df_train_aux_rows,]$y == "no", "y"] <- "y"
df_train_aux[df_train_aux$y == "n", "y"] <- "no"
df_train_aux[df_train_aux$y == "y", "y"] <- "yes"
write.table(x = df_train_aux,
file = paste(s_dataset_faltantes, as.character(porc_step_ruido*100), s_csv, sep = ''),
sep = ",",
quote = FALSE,
row.names = FALSE)
}
rm(list=ls())
options(warn=-1)  #Suprimimos los Warnings
a_train_original_data <- "train_original.csv"
s_dataset_faltantes <- "dataset_ruido_"
s_csv <- "_.csv"
df_train_original <- read.csv(a_train_original_data,
header = TRUE,
sep = ",",
as.is = TRUE,
check.names = FALSE)
porc_min_ruido <- 0
porc_max_ruido <- 0.35
porc_step_ruido <- 0.01
# Cantidad de archivos a generar por tipo de ruido.
N <- round((porc_max_ruido - porc_min_ruido) /  porc_step_ruido, 0)
for (i in 1:N){
porc_ruido <- porc_min_ruido + i*porc_step_ruido
# Partimos del data set puro.
df_train_aux <- df_train_original
# Tomamos el procentaje de filas a nulear al azar.
df_train_aux_rows <- sample(1:nrow(df_train_aux), porc_ruido*nrow(df_train_aux))
# Agregamos el ruido
df_train_aux[df_train_aux_rows, ][df_train_aux[df_train_aux_rows,]$y == "yes", "y"] <- "n"
df_train_aux[df_train_aux_rows, ][df_train_aux[df_train_aux_rows,]$y == "no", "y"] <- "y"
df_train_aux[df_train_aux$y == "n", "y"] <- "no"
df_train_aux[df_train_aux$y == "y", "y"] <- "yes"
write.table(x = df_train_aux,
file = paste(s_dataset_faltantes, as.character(porc_ruido*100), s_csv, sep = ''),
sep = ",",
quote = FALSE,
row.names = FALSE)
}
rm(list=ls())
options(warn=-1)  #Suprimimos los Warnings
a_train_original_data <- "train_original.csv"
s_dataset_faltantes <- "dataset_ruido_"
s_csv <- "_.csv"
df_train_original <- read.csv(a_train_original_data,
header = TRUE,
sep = ",",
as.is = TRUE,
check.names = FALSE)
porc_min_ruido <- 0
porc_max_ruido <- 0.35
porc_step_ruido <- 0.01
# Cantidad de archivos a generar por tipo de ruido.
N <- round((porc_max_ruido - porc_min_ruido) /  porc_step_ruido, 0)
for (i in 1:N){
porc_ruido <- porc_min_ruido + i*porc_step_ruido
# Partimos del data set puro.
df_train_aux <- df_train_original
# Tomamos el procentaje de filas a nulear al azar.
df_train_aux_rows <- sample(1:nrow(df_train_aux), porc_ruido*nrow(df_train_aux))
# Agregamos el ruido
df_train_aux[df_train_aux_rows, ][df_train_aux[df_train_aux_rows,]$y == "yes", "y"] <- "n"
df_train_aux[df_train_aux_rows, ][df_train_aux[df_train_aux_rows,]$y == "no", "y"] <- "y"
df_train_aux[df_train_aux$y == "n", "y"] <- "no"
df_train_aux[df_train_aux$y == "y", "y"] <- "yes"
write.table(x = df_train_aux,
file = paste(s_dataset_faltantes, as.character(porc_ruido*100), s_csv, sep = ''),
sep = ",",
quote = FALSE,
row.names = FALSE)
}
